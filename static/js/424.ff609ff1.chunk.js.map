{"version":3,"file":"static/js/424.ff609ff1.chunk.js","mappings":"6JA0BA,IAvBe,SAAAA,GACb,IAAMC,EAAS,CACbC,SAAU,aACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,EACdC,cAAc,EACdC,WAAW,EACXC,cAAUC,EACVC,MAAO,WAGT,OAAQV,GACN,IAAK,UACHW,EAAAA,GAAAA,KAAW,kCAAmCV,GAC9C,MACF,IAAK,QACHU,EAAAA,GAAAA,MAAY,0BAA2BV,GACvC,MACF,QACE,OAEL,C,8ICtBM,IAAMW,GAAc,OAAOC,EAAAA,GAAP,sBAAH,qHAQXC,GAAY,OAAOC,EAAAA,GAAP,sBAAH,qPAaTC,GAAc,OAAOC,EAAAA,IAAP,sBAAH,uEAMXC,GAAW,yGAKZF,EALY,2BASXG,GAAO,4X,mBCcpB,EA1CmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAIhBC,EAAQC,EAAAA,KAAaC,MAAM,CAC7BC,YAAaF,EAAAA,GACH,mBAKPG,SAAS,gCAOd,OACE,SAAC,KAAD,CACEC,cAnBkB,CACpBF,YAAa,IAmBXJ,SARiB,SAAC,EAAD,GAAqC,IAAlCI,EAAiC,EAAjCA,YAAiBG,EAAgB,EAAhBA,UACvCP,EAASI,GACTG,GACD,EAMGC,iBAAkBP,EAHpB,UAKE,UAACT,EAAD,YACE,SAACE,EAAD,CACEe,KAAK,OACLC,KAAK,cACLC,aAAa,MACbC,YAAY,mBAEd,SAACd,EAAD,CAAaW,KAAK,SAAlB,UACE,SAACb,EAAD,OAEF,SAAC,KAAD,CAAcc,KAAK,cAAnB,SACG,SAAAG,GAAM,OAAI,SAACd,EAAD,UAAUc,GAAd,QAKhB,E,4DCSD,EAjDe,WAAO,IAAD,EACnB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA4BF,EAAAA,EAAAA,WAAS,GAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,EAAS,UAAGP,EAAaQ,IAAI,gBAApB,QAAgC,GAkC/C,OA/BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAwB,IAAIC,gBAC5BC,EAASF,EAAsBE,OACrC,GAAkB,KAAdL,EAwBJ,OApBAD,GAAU,IACVO,EAAAA,EAAAA,IAAeN,EAAWK,GACvBE,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACP,GAAuB,IAAnBA,EAAQC,OAEV,OADAZ,EAAU,KACHa,EAAAA,EAAAA,GAAO,WAEhBb,EAAUW,EACX,IACAG,OAAM,SAAAC,GACDA,EAAMC,UACRC,QAAQC,IAAIH,EAAMC,SAASG,KAAKC,iBAChCP,EAAAA,EAAAA,GAAO,UACEE,EAAMM,SACfJ,QAAQC,IAAIH,EAAMxB,KAErB,IACA+B,SAAQ,WACPpB,GAAU,EACX,IACI,WACLI,EAAsBiB,OACvB,EAzBCvB,EAAU,GA0Bb,GAAE,CAACG,KAEF,6BACE,SAAC,IAAD,4BACA,SAAC,EAAD,CAAYtB,SApCU,SAAA2C,GAAK,OAAI3B,EAAgB,CAAE2B,MAAAA,GAAtB,IAqC1BvB,GAAS,SAACwB,EAAA,EAAD,KAAa,SAACC,EAAA,EAAD,CAAY3B,OAAQA,EAAQ4B,IAAI,MACvD,SAACC,EAAA,EAAD,KACA,SAAC,KAAD,MAGL,C","sources":["components/utils/alert.js","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst notify = value => {\n  const params = {\n    position: 'top-center',\n    autoClose: 5000,\n    hideProgressBar: true,\n    closeOnClick: false,\n    pauseOnHover: false,\n    draggable: false,\n    progress: undefined,\n    theme: 'colored',\n  };\n\n  switch (value) {\n    case 'warning':\n      toast.warn('Nothing found for your request!', params);\n      break;\n    case 'error':\n      toast.error('Error! Something wrong!', params);\n      break;\n    default:\n      return;\n  }\n};\nexport default notify;\n","import styled from '@emotion/styled/macro';\nimport { Form, Field } from 'formik';\nimport { FcSearch } from 'react-icons/fc';\nexport const FormWrapper = styled(Form)`\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 30px;\n`;\n\nexport const FormInput = styled(Field)`\n  padding: 10px;\n  font-size: 20px;\n  font-weight: 500;\n  color: #474747;\n  background-color: transparent;\n  border-radius: 10px;\n  border: none;\n  border-bottom: 2px solid black;\n  outline: transparent;\n  box-shadow: 0px 12px 12px -4px rgba(0, 0, 0, 0.59);\n`;\n\nexport const ButtontIcon = styled(FcSearch)`\n  width: 30px;\n  height: 30px;\n  transition: all 250ms;\n`;\n\nexport const FormButtont = styled.button`\n  border: none;\n  background-color: transparent;\n  cursor: pointer;\n\n  &:hover ${ButtontIcon} {\n    transform: scale(1.4);\n  }\n`;\nexport const Message = styled.div`\n  position: absolute;\n  bottom: -40px;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 20px;\n  color: white;\n  text-shadow: 0 0 5px rgb(255, 221, 0), 0 0 10px rgb(255, 221, 0),\n    0 0 15px rgb(255, 221, 0), 0 0 20px rgb(255, 221, 0),\n    0 0 30px rgb(255, 221, 0), 0 0 40px rgb(255, 221, 0),\n    0 0 55px rgb(255, 221, 0), 0 0 75px rgb(255, 221, 0);\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport {\n  FormInput,\n  FormWrapper,\n  FormButtont,\n  Message,\n  ButtontIcon,\n} from './SearchForm.styled';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\n\nconst SearchForm = ({ onSubmit }) => {\n  const initialValues = {\n    searchQuery: '',\n  };\n  let scima = yup.object().shape({\n    searchQuery: yup\n      .string('not valid input')\n      // .matches(\n      //   /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      //   'not valid input'\n      // )\n      .required('Enter something to search!'),\n  });\n  const handleSubmit = ({ searchQuery }, { resetForm }) => {\n    onSubmit(searchQuery);\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={scima}\n    >\n      <FormWrapper>\n        <FormInput\n          type=\"text\"\n          name=\"searchQuery\"\n          autoComplete=\"off\"\n          placeholder=\"Search movies\"\n        />\n        <FormButtont type=\"submit\">\n          <ButtontIcon />\n        </FormButtont>\n        <ErrorMessage name=\"searchQuery\">\n          {errMsg => <Message>{errMsg}</Message>}\n        </ErrorMessage>\n      </FormWrapper>\n    </Formik>\n  );\n};\n\nexport default SearchForm;\nSearchForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByName } from 'components/utils/api-servises';\nimport SearchForm from 'components/SearchForm';\nimport MoviesList from 'components/MoviesList';\nimport SectionTitle from 'components/Title/Title';\nimport notify from 'components/utils/alert';\nimport Loader from 'components/Loader';\nimport Scroll from 'components/Scroll';\nimport { ToastContainer } from 'react-toastify';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [isLoad, setIsLoad] = useState(false);\n  const paramName = searchParams.get('query') ?? '';\n  const updateQueryString = query => setSearchParams({ query });\n\n  useEffect(() => {\n    const controllerMovieByName = new AbortController();\n    const signal = controllerMovieByName.signal;\n    if (paramName === '') {\n      setMovies([]);\n      return;\n    }\n    setIsLoad(true);\n    getMovieByName(paramName, signal)\n      .then(({ results }) => {\n        if (results.length === 0) {\n          setMovies([]);\n          return notify('warning');\n        }\n        setMovies(results);\n      })\n      .catch(error => {\n        if (error.response) {\n          console.log(error.response.data.status_message);\n          notify('error');\n        } else if (error.request) {\n          console.log(error.name);\n        }\n      })\n      .finally(() => {\n        setIsLoad(false);\n      });\n    return () => {\n      controllerMovieByName.abort();\n    };\n  }, [paramName]);\n  return (\n    <main>\n      <SectionTitle>Find a movie</SectionTitle>\n      <SearchForm onSubmit={updateQueryString} />\n      {isLoad ? <Loader /> : <MoviesList movies={movies} url=\"\" />}\n      <Scroll />\n      <ToastContainer />\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["value","params","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","toast","FormWrapper","Form","FormInput","Field","ButtontIcon","FcSearch","FormButtont","Message","onSubmit","scima","yup","shape","searchQuery","required","initialValues","resetForm","validationSchema","type","name","autoComplete","placeholder","errMsg","useSearchParams","searchParams","setSearchParams","useState","movies","setMovies","isLoad","setIsLoad","paramName","get","useEffect","controllerMovieByName","AbortController","signal","getMovieByName","then","results","length","notify","catch","error","response","console","log","data","status_message","request","finally","abort","query","Loader","MoviesList","url","Scroll"],"sourceRoot":""}